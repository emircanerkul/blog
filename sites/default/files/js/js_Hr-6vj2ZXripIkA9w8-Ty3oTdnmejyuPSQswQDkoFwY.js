/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
};
/*! @drupal/once - v1.0.1 - 2021-06-12 */
var once=function(){"use strict";var n=/[\11\12\14\15\40]+/,e="data-once",t=document;function r(n,t,r){return n[t+"Attribute"](e,r)}function o(e){if("string"!=typeof e)throw new TypeError("once ID must be a string");if(""===e||n.test(e))throw new RangeError("once ID must not be empty or contain spaces");return'[data-once~="'+e+'"]'}function u(n){if(!(n instanceof Element))throw new TypeError("The element must be an instance of Element");return!0}function i(n,e){void 0===e&&(e=t);var r=n;if(null===n)r=[];else{if(!n)throw new TypeError("Selector must not be empty");"string"!=typeof n||e!==t&&!u(e)?n instanceof Element&&(r=[n]):r=e.querySelectorAll(n)}return Array.prototype.slice.call(r)}function c(n,e,t){return e.filter((function(e){var r=u(e)&&e.matches(n);return r&&t&&t(e),r}))}function f(e,t){var o=t.add,u=t.remove,i=[];r(e,"has")&&r(e,"get").trim().split(n).forEach((function(n){i.indexOf(n)<0&&n!==u&&i.push(n)})),o&&i.push(o);var c=i.join(" ");r(e,""===c?"remove":"set",c)}function a(n,e,t){return c(":not("+o(n)+")",i(e,t),(function(e){return f(e,{add:n})}))}return a.remove=function(n,e,t){return c(o(n),i(e,t),(function(e){return f(e,{remove:n})}))},a.filter=function(n,e,t){return c(o(n),i(e,t))},a.find=function(n,e){return i(n?o(n):"[data-once]",e)},a}();

;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function () {
  var settingsElement = document.querySelector('head > script[type="application/json"][data-drupal-selector="drupal-settings-json"], body > script[type="application/json"][data-drupal-selector="drupal-settings-json"]');
  window.drupalSettings = {};

  if (settingsElement !== null) {
    window.drupalSettings = JSON.parse(settingsElement.textContent);
  }
})();;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

window.Drupal = {
  behaviors: {},
  locale: {}
};

(function (Drupal, drupalSettings, drupalTranslations, console, Proxy, Reflect) {
  Drupal.throwError = function (error) {
    setTimeout(function () {
      throw error;
    }, 0);
  };

  Drupal.attachBehaviors = function (context, settings) {
    context = context || document;
    settings = settings || drupalSettings;
    var behaviors = Drupal.behaviors;
    Object.keys(behaviors || {}).forEach(function (i) {
      if (typeof behaviors[i].attach === 'function') {
        try {
          behaviors[i].attach(context, settings);
        } catch (e) {
          Drupal.throwError(e);
        }
      }
    });
  };

  Drupal.detachBehaviors = function (context, settings, trigger) {
    context = context || document;
    settings = settings || drupalSettings;
    trigger = trigger || 'unload';
    var behaviors = Drupal.behaviors;
    Object.keys(behaviors || {}).forEach(function (i) {
      if (typeof behaviors[i].detach === 'function') {
        try {
          behaviors[i].detach(context, settings, trigger);
        } catch (e) {
          Drupal.throwError(e);
        }
      }
    });
  };

  Drupal.checkPlain = function (str) {
    str = str.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
    return str;
  };

  Drupal.formatString = function (str, args) {
    var processedArgs = {};
    Object.keys(args || {}).forEach(function (key) {
      switch (key.charAt(0)) {
        case '@':
          processedArgs[key] = Drupal.checkPlain(args[key]);
          break;

        case '!':
          processedArgs[key] = args[key];
          break;

        default:
          processedArgs[key] = Drupal.theme('placeholder', args[key]);
          break;
      }
    });
    return Drupal.stringReplace(str, processedArgs, null);
  };

  Drupal.stringReplace = function (str, args, keys) {
    if (str.length === 0) {
      return str;
    }

    if (!Array.isArray(keys)) {
      keys = Object.keys(args || {});
      keys.sort(function (a, b) {
        return a.length - b.length;
      });
    }

    if (keys.length === 0) {
      return str;
    }

    var key = keys.pop();
    var fragments = str.split(key);

    if (keys.length) {
      for (var i = 0; i < fragments.length; i++) {
        fragments[i] = Drupal.stringReplace(fragments[i], args, keys.slice(0));
      }
    }

    return fragments.join(args[key]);
  };

  Drupal.t = function (str, args, options) {
    options = options || {};
    options.context = options.context || '';

    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.strings && drupalTranslations.strings[options.context] && drupalTranslations.strings[options.context][str]) {
      str = drupalTranslations.strings[options.context][str];
    }

    if (args) {
      str = Drupal.formatString(str, args);
    }

    return str;
  };

  Drupal.url = function (path) {
    return drupalSettings.path.baseUrl + drupalSettings.path.pathPrefix + path;
  };

  Drupal.url.toAbsolute = function (url) {
    var urlParsingNode = document.createElement('a');

    try {
      url = decodeURIComponent(url);
    } catch (e) {}

    urlParsingNode.setAttribute('href', url);
    return urlParsingNode.cloneNode(false).href;
  };

  Drupal.url.isLocal = function (url) {
    var absoluteUrl = Drupal.url.toAbsolute(url);
    var protocol = window.location.protocol;

    if (protocol === 'http:' && absoluteUrl.indexOf('https:') === 0) {
      protocol = 'https:';
    }

    var baseUrl = "".concat(protocol, "//").concat(window.location.host).concat(drupalSettings.path.baseUrl.slice(0, -1));

    try {
      absoluteUrl = decodeURIComponent(absoluteUrl);
    } catch (e) {}

    try {
      baseUrl = decodeURIComponent(baseUrl);
    } catch (e) {}

    return absoluteUrl === baseUrl || absoluteUrl.indexOf("".concat(baseUrl, "/")) === 0;
  };

  Drupal.formatPlural = function (count, singular, plural, args, options) {
    args = args || {};
    args['@count'] = count;
    var pluralDelimiter = drupalSettings.pluralDelimiter;
    var translations = Drupal.t(singular + pluralDelimiter + plural, args, options).split(pluralDelimiter);
    var index = 0;

    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.pluralFormula) {
      index = count in drupalTranslations.pluralFormula ? drupalTranslations.pluralFormula[count] : drupalTranslations.pluralFormula.default;
    } else if (args['@count'] !== 1) {
      index = 1;
    }

    return translations[index];
  };

  Drupal.encodePath = function (item) {
    return window.encodeURIComponent(item).replace(/%2F/g, '/');
  };

  Drupal.deprecationError = function (_ref) {
    var message = _ref.message;

    if (drupalSettings.suppressDeprecationErrors === false && typeof console !== 'undefined' && console.warn) {
      console.warn("[Deprecation] ".concat(message));
    }
  };

  Drupal.deprecatedProperty = function (_ref2) {
    var target = _ref2.target,
        deprecatedProperty = _ref2.deprecatedProperty,
        message = _ref2.message;

    if (!Proxy || !Reflect) {
      return target;
    }

    return new Proxy(target, {
      get: function get(target, key) {
        if (key === deprecatedProperty) {
          Drupal.deprecationError({
            message: message
          });
        }

        for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          rest[_key - 2] = arguments[_key];
        }

        return Reflect.get.apply(Reflect, [target, key].concat(rest));
      }
    });
  };

  Drupal.theme = function (func) {
    if (func in Drupal.theme) {
      var _Drupal$theme;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return (_Drupal$theme = Drupal.theme)[func].apply(_Drupal$theme, args);
    }
  };

  Drupal.theme.placeholder = function (str) {
    return "<em class=\"placeholder\">".concat(Drupal.checkPlain(str), "</em>");
  };
})(Drupal, window.drupalSettings, window.drupalTranslations, window.console, window.Proxy, window.Reflect);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

if (window.jQuery) {
  jQuery.noConflict();
}

document.documentElement.className += ' js';

(function (Drupal, drupalSettings) {
  var domReady = function domReady(callback) {
    var listener = function listener() {
      callback();
      document.removeEventListener('DOMContentLoaded', listener);
    };

    if (document.readyState !== 'loading') {
      setTimeout(callback, 0);
    } else {
      document.addEventListener('DOMContentLoaded', listener);
    }
  };

  domReady(function () {
    Drupal.attachBehaviors(document, drupalSettings);
  });
})(Drupal, window.drupalSettings);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

Drupal.debounce = function (func, wait, immediate) {
  var timeout;
  var result;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var context = this;

    var later = function later() {
      timeout = null;

      if (!immediate) {
        result = func.apply(context, args);
      }
    };

    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);

    if (callNow) {
      result = func.apply(context, args);
    }

    return result;
  };
};;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function (Drupal, debounce) {
  var liveElement;
  var announcements = [];
  Drupal.behaviors.drupalAnnounce = {
    attach: function attach(context) {
      if (!liveElement) {
        liveElement = document.createElement('div');
        liveElement.id = 'drupal-live-announce';
        liveElement.className = 'visually-hidden';
        liveElement.setAttribute('aria-live', 'polite');
        liveElement.setAttribute('aria-busy', 'false');
        document.body.appendChild(liveElement);
      }
    }
  };

  function announce() {
    var text = [];
    var priority = 'polite';
    var announcement;
    var il = announcements.length;

    for (var i = 0; i < il; i++) {
      announcement = announcements.pop();
      text.unshift(announcement.text);

      if (announcement.priority === 'assertive') {
        priority = 'assertive';
      }
    }

    if (text.length) {
      liveElement.innerHTML = '';
      liveElement.setAttribute('aria-busy', 'true');
      liveElement.setAttribute('aria-live', priority);
      liveElement.innerHTML = text.join('\n');
      liveElement.setAttribute('aria-busy', 'false');
    }
  }

  Drupal.announce = function (text, priority) {
    announcements.push({
      text: text,
      priority: priority
    });
    return debounce(announce, 200)();
  };
})(Drupal, Drupal.debounce);;
(function (Drupal, once) {

  var lastPath = null;
  var prefetchTimer = setTimeout(function (){}, 0);
  var lastTimerUrl = null;

  // Shim for $.extend(true, ...)
  var deepExtend = function (out) {
    out = out || {};

    for (var i = 1; i < arguments.length; i++) {
      var obj = arguments[i];

      if (!obj) { continue;
      }

      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          if (typeof obj[key] === "object" && obj[key] !== null) {
            if (obj[key] instanceof Array) { out[key] = obj[key].slice(0);
            } else { out[key] = deepExtend(out[key], obj[key]);
            }
          } else { out[key] = obj[key];
          }
        }
      }
    }

    return out;
  };

  function requestUrl(url, search, hash, scrollTop, context) {
    clearTimeout(prefetchTimer);
    // Do some early precautions to ensure URL is local.
    url = url.replace(/^\/?/, '/').replace(/\/\//g, '/');
    // Fetch the new URL, do not allow requests/redirects to non local origins.
    fetch(url, { redirect: 'follow', mode: 'same-origin' }).then(function (response) {
      // Validate content type to prevent processing links to non-html paths.
      if (!response.headers.get('Content-Type').match(/^text\/html/)) {
        throw 'Invalid content type';
      }
      return response.text();
    }).then(function (html) {
      var domparser = new DOMParser();
      var newDocument = domparser.parseFromString(html, 'text/html');
      // Make sure <main> exists in response.
      var newMain = newDocument.querySelector('main');
      if (!newMain) {
        throw 'Cannot parse response for ' + url;
      }

      // Log the URL to prevent making requests when hash/query params change.
      lastPath = url;

      // Replace the title.
      document.title = newDocument.title;

      // Get drupalSettings.
      var newSettings = newDocument.querySelector('[data-drupal-selector="drupal-settings-json"]');
      var oldSettings = window.drupalSettings;
      if (newSettings) {
        window.drupalSettings = deepExtend({}, window.drupalSettings, JSON.parse(newSettings.textContent));
      }

      // Determine what CSS/JS files are new.
      var newCss = window.drupalSettings.bookishSpeed.css.filter(function (x) { return oldSettings.bookishSpeed.css.indexOf(x) === -1; });
      var newJs = window.drupalSettings.bookishSpeed.js.filter(function (x) { return oldSettings.bookishSpeed.js.indexOf(x) === -1; });

      // Concat the old+new CSS/JS to avoid re-loading files later.
      window.drupalSettings.bookishSpeed.css = oldSettings.bookishSpeed.css.concat(newCss);
      window.drupalSettings.bookishSpeed.js = oldSettings.bookishSpeed.js.concat(newJs);

      var loadedCssAssets = 0;
      var loadedJsAssets = 0;

      var replaced = false;
      var replaceHtml = function () {
        replaced = true;
        var main = document.querySelector('main');
        main.innerHTML = newMain.innerHTML;
        // Special scroll handling for hash links.
        if (hash && context === 'click') {
          var hashElem = document.getElementById(hash.slice(1));
          if (hashElem) {
            setTimeout(function () {
              hashElem.scrollIntoView();
              var oldState = history.state;
              oldState.scrollTop = document.documentElement.scrollTop;
              history.replaceState(oldState, '');
            }, 0);
          }
        }
        else {
          window.scrollTo({ top: scrollTop });
        }
        // Accessibility tweaks.
        var skipLink = document.querySelector('#skip-link');
        if (skipLink) {
          skipLink.classList.remove('focusable');
          skipLink.focus();
        };
        Drupal.announce(Drupal.t('Navigated to "@title"', { '@title': document.title }));
        var event = new CustomEvent('bookish-speed-html', { });
        document.dispatchEvent(event);
      };

      var triggerBehaviors = function () {
        var main = document.querySelector('main');
        Drupal.attachBehaviors(main, window.drupalSettings);
        var event = new CustomEvent('bookish-speed-javascript', { });
        document.dispatchEvent(event);
      };

      // If there are no CSS assets, we can replace now.
      var timeout;
      if (newCss.length === 0) {
        replaceHtml();
      }
      else {
        var timeout = setTimeout(replaceHtml, window.drupalSettings.bookishSpeedSettings ? window.drupalSettings.bookishSpeedSettings.wait_time : 300);
      }

      var cssLoaded = function () {
        loadedCssAssets++;
        if (!replaced && loadedCssAssets >= newCss.length) {
          clearTimeout(timeout);
          replaceHtml();
        }
      };

      // Wait to trigger behaviors until JS is loaded.
      var jsLoaded = function () {
        loadedJsAssets++;
        if (loadedJsAssets >= newJs.length) {
          // Avoid race conditions in JS/CSS loading.
          if (replaced) {
            triggerBehaviors();
          }
          else {
            var interval = setInterval(function () {
              if (replaced) {
                triggerBehaviors();
                clearInterval(interval);
              }
            }, 5);
          }
        }
      };

      if (newJs.length === 0) {
        jsLoaded();
      }

      // Append CSS/JS to head.
      newCss.forEach(function (newUrl) {
        var link = document.createElement('link');
        link.rel = "stylesheet";
        link.type = "text/css";
        link.href = newUrl + (newUrl.indexOf('?') === -1 ? '?' : '&') + window.drupalSettings.bookishSpeed.query_string;
        link.addEventListener('load', cssLoaded);
        link.addEventListener('error', cssLoaded);
        document.head.appendChild(link);
      });
      newJs.forEach(function (newUrl) {
        var script = document.createElement('script');
        script.async = false;
        script.src = newUrl + (newUrl.indexOf('?') === -1 ? '?' : '&') + window.drupalSettings.bookishSpeed.query_string;
        script.addEventListener('load', jsLoaded);
        script.addEventListener('error', jsLoaded);
        document.head.appendChild(script);
      });
    }).catch(function (error) {
      // Fall back to normal navigation.
      console.error('Cannot request ' + url, error);
      window.location = url + search + hash;
    });
  };

  function prefetchUrl(url, search) {
    // Do some early precautions to ensure URL is local.
    url = url.replace(/^\/?/, '/').replace(/\/\//g, '/');
    var link = document.createElement('link');
    link.rel = 'prefetch';
    link.href = url + search;
    document.head.appendChild(link);
  }

  Drupal.behaviors.bookishSpeed = {
    attach: function attach(context, settings) {
      // Default to excluding admin-y paths or links with extensions.
      var exclude_regex = settings.bookishSpeedSettings ? settings.bookishSpeedSettings.exclude_regex : '/(admin|node|user)|\.[a-zA-Z0-9]+$';
      exclude_regex = new RegExp(exclude_regex);
      once('bookish-speed', 'a:not([target]):not(.use-ajax):not(.no-speed)', context).forEach(function (element) {
        // Check if URL is local, a relative anchor, or fails regex check.
        if (element.getAttribute('href')[0] === '#' || element.href.match(exclude_regex) || !Drupal.url.isLocal(element.href)) {
          return;
        }
        var url = new URL(element.href);
        var pathname = url.pathname.replace(/^\/?/, '/').replace(/\/\//g, '/');
        element.addEventListener('click', function (event) {
          // Do nothing if clicking a hash URL.
          if (document.location.pathname === pathname && url.hash) {
            return;
          }
          event.preventDefault();
          history.replaceState({
            scrollTop: document.documentElement.scrollTop,
            fromBookishSpeed: true,
          }, '');
          history.pushState({
            scrollTop: 0,
            fromBookishSpeed: true,
          }, '', pathname + url.search + url.hash);
          requestUrl(pathname, url.search, url.hash, 0, 'click');
        });
        element.addEventListener('mouseover', function () {
          if (lastTimerUrl === pathname + url.search || document.querySelector('link[rel="prefetch"][href="' + pathname + url.search + '"]')) {
            return;
          }
          lastTimerUrl = pathname + url.search;
          clearTimeout(prefetchTimer);
          prefetchTimer = setTimeout(function () {
            prefetchUrl(pathname, url.search);
          }, 65);
        }, { passive: true, capture: true });
        element.addEventListener('mouseout', function () {
          clearTimeout(prefetchTimer);
        }, { passive: true, capture: true });
      });
      once('bookish-speed-history', 'body', context).forEach(function () {
        if (history.scrollRestoration) {
          history.scrollRestoration = 'manual';
        }
        window.addEventListener('popstate', function (event) {
          if (event.state && event.state.fromBookishSpeed && document.location.pathname !== lastPath) {
            var scrollTop = event.state && event.state.scrollTop ? event.state.scrollTop : 0;
            requestUrl(document.location.pathname, document.location.search, document.location.hash, scrollTop, 'popstate');
          }
        });
      });
      once('bookish-speed-skip-link', '#skip-link', context).forEach(function (element) {
        element.addEventListener('blur', function (event) {
          if (event.target !== document.activeElement) {
            element.classList.add('focusable');
          }
        });
      });
    }
  };

})(Drupal, once);
;
// This would normally go in bk_header.sfc in a <script> tag, but I don't
// want to add JS if people aren't using Bookish Speed.
document.addEventListener('bookish-speed-html', function () {
  var header = document.querySelector('.bk-header__name');
  if (!header) {
    return;
  }
  var newHeader = document.createElement(document.location.pathname === '/' ? 'h1' : 'a');
  newHeader.setAttribute('href', '/');
  newHeader.setAttribute('class', 'bk-header__name');
  newHeader.innerText = header.innerText;
  header.parentNode.replaceChild(newHeader, header);
  Drupal.attachBehaviors(newHeader.parentNode, window.drupalSettings);
});
;
(function (Drupal, once) {

  Drupal.behaviors.bookishAdminBlurImage = {
    attach: function attach(context, settings) {
      once('bookish-image-blur', '.bookish-image-blur-image', context).forEach(function (blurImage) {
        if (!blurImage.complete) {
          blurImage.classList.add('loading');
          blurImage.onload = function () {
            blurImage.classList.add('loaded');
          };
        }
      });
    }
  };

})(Drupal, once);
;
